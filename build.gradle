plugins {
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
    id "io.freefair.lombok" version "6.5.0.3"
    id "maven-publish"
}

version = project.mod_version
group = project.mod_group
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

loom {
    silentMojangMappingsLicense()

    forge {
        mixinConfigs = [
                "classicraft.mixins.json"
        ]

        dataGen {
            mod project.mod_id
        }
    }

    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

task mergeResources(type: Copy) {
    def generated = files("src/generated/resources")
    def resources = files("src/main/resources")

    from generated
    exclude(str -> {
        def file = file("src/main/resources/" + str.relativePath)
        return file.isFile() && !resources.contains(file)
    })
    into "$buildDir/resources/main"
}

compileJava.dependsOn mergeResources

repositories {
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    implementation 'org.projectlombok:lombok:1.18.24'
    implementation 'org.jetbrains:annotations:23.0.0'
    forge "net.minecraftforge:forge:${project.forge_version}"
}

jar {
    from("LICENSE")
    exclude(".cache/**")
    exclude("nameless/classicraft/datagen/**")
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_id + "sareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Nameless",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task deobfJar(type: Jar) {
    classifier 'deobf'
    from sourceSets.main.output
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_id + "sareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Nameless",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

artifacts {
    archives deobfJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
